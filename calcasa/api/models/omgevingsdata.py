# coding: utf-8

"""
    Copyright 2025 Calcasa B.V.

    Licensed under the Apache License, Version 2.0 (the "License");
    you may not use this file except in compliance with the License.
    You may obtain a copy of the License at

        http://www.apache.org/licenses/LICENSE-2.0

    Unless required by applicable law or agreed to in writing, software
    distributed under the License is distributed on an "AS IS" BASIS,
    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    See the License for the specific language governing permissions and
    limitations under the License.

    Calcasa Public API
    The Calcasa API is used to connect to Calcasa provided services. For more information, please visit [Documentation](https://docs.calcasa.nl) or [GitHub](https://github.com/calcasa/api).

    The version of the OpenAPI document: 1.4.0-rc1
    Contact: info@calcasa.nl
    Generated by: https://openapi-generator.tech
"""

from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict
from typing import Any, ClassVar, Dict, List, Optional
from calcasa.api.models.gebiedsdata import Gebiedsdata
from typing import Optional, Set
from typing_extensions import Self

class Omgevingsdata(BaseModel):
    """
    Omgevingsdata
    """ # noqa: E501
    buurt: Optional[Gebiedsdata] = None
    wijk: Optional[Gebiedsdata] = None
    gemeente: Optional[Gebiedsdata] = None
    provincie: Optional[Gebiedsdata] = None
    land: Optional[Gebiedsdata] = None
    additional_properties: Dict[str, Any] = {}
    __properties: ClassVar[List[str]] = ["buurt", "wijk", "gemeente", "provincie", "land"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of Omgevingsdata from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        * Fields in `self.additional_properties` are added to the output dict.
        """
        excluded_fields: Set[str] = set([
            "additional_properties",
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of buurt
        if self.buurt:
            _dict['buurt'] = self.buurt.to_dict()
        # override the default output from pydantic by calling `to_dict()` of wijk
        if self.wijk:
            _dict['wijk'] = self.wijk.to_dict()
        # override the default output from pydantic by calling `to_dict()` of gemeente
        if self.gemeente:
            _dict['gemeente'] = self.gemeente.to_dict()
        # override the default output from pydantic by calling `to_dict()` of provincie
        if self.provincie:
            _dict['provincie'] = self.provincie.to_dict()
        # override the default output from pydantic by calling `to_dict()` of land
        if self.land:
            _dict['land'] = self.land.to_dict()
        # puts key-value pairs in additional_properties in the top level
        if self.additional_properties is not None:
            for _key, _value in self.additional_properties.items():
                _dict[_key] = _value

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of Omgevingsdata from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "buurt": Gebiedsdata.from_dict(obj["buurt"]) if obj.get("buurt") is not None else None,
            "wijk": Gebiedsdata.from_dict(obj["wijk"]) if obj.get("wijk") is not None else None,
            "gemeente": Gebiedsdata.from_dict(obj["gemeente"]) if obj.get("gemeente") is not None else None,
            "provincie": Gebiedsdata.from_dict(obj["provincie"]) if obj.get("provincie") is not None else None,
            "land": Gebiedsdata.from_dict(obj["land"]) if obj.get("land") is not None else None
        })
        # store additional fields in additional_properties
        for _key in obj.keys():
            if _key not in cls.__properties:
                _obj.additional_properties[_key] = obj.get(_key)

        return _obj


